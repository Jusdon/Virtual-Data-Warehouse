USE [EDW_900_Metadata]

/* ONLY REQUIRED TO SUPPORT THE EXCEL MACRO - NOT THE VEDW TOOL */

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF EXISTS (SELECT * FROM sys.objects WHERE type ='P' AND name ='usp_MD_DV_METADATA')
DROP PROCEDURE usp_MD_DV_METADATA
GO

CREATE PROCEDURE [dbo].[usp_MD_DV_METADATA] @VERSION_ID int
AS
BEGIN
	SET NOCOUNT ON;	

/*
Created by: Roelant Vos 2015-03-12
Last updated by: Roelant Vos 2015-03-12
Last update: initial creation
*/

-- Remove existing metadata
PRINT 'Deleting existing metadata';
DELETE FROM dbo.MD_STG_HUB_XREF;
DELETE FROM dbo.MD_STG_LINK_ATT_XREF;
DELETE FROM dbo.MD_STG_SAT_ATT_XREF;
DELETE FROM dbo.MD_HUB_LINK_XREF;
DELETE FROM dbo.MD_SAT;
DELETE FROM dbo.MD_BUSINESS_KEY_COMPONENT_PART;
DELETE FROM dbo.MD_BUSINESS_KEY_COMPONENT
DELETE FROM dbo.MD_ATT;
DELETE FROM dbo.MD_STG;
DELETE FROM dbo.MD_HUB;
DELETE FROM dbo.MD_LINK;
PRINT 'Finished deleting existing metadata';
PRINT ''

PRINT 'Processing metadata for MD_STG (Staging Area)';
INSERT INTO [MD_STG]
([STAGING_AREA_TABLE_NAME],[STAGING_AREA_TABLE_ID])
SELECT STAGING_AREA_TABLE AS STAGING_AREA_TABLE_NAME, ROW_NUMBER() OVER (ORDER BY STAGING_AREA_TABLE ASC) AS ROWNR
FROM
	(
		SELECT DISTINCT STAGING_AREA_TABLE
		FROM MD_TABLE_MAPPING
		WHERE SUBSTRING(STAGING_AREA_TABLE,1,4)='STG_'
			AND VERSION_ID = @VERSION_ID
	) stgsbu


PRINT ''
PRINT 'Processing metadata for MD_HUB (Hub entities)';
INSERT INTO MD_HUB
(HUB_TABLE_NAME, HUB_TABLE_ID)
SELECT INTEGRATION_AREA_TABLE AS HUB_TABLE_NAME, ROW_NUMBER() OVER (ORDER BY INTEGRATION_AREA_TABLE ASC) AS ROWNR
FROM
	(
		SELECT DISTINCT INTEGRATION_AREA_TABLE
		FROM MD_TABLE_MAPPING
		WHERE SUBSTRING(INTEGRATION_AREA_TABLE,1,4)='HUB_'
			AND VERSION_ID = @VERSION_ID
	) sub


PRINT ''
PRINT 'Processing metadata for MD_LINK (Link entities)';
INSERT INTO [MD_LINK]
([LINK_TABLE_NAME],[LINK_TABLE_ID])
SELECT INTEGRATION_AREA_TABLE AS LINK_TABLE_NAME, ROW_NUMBER() OVER (ORDER BY INTEGRATION_AREA_TABLE ASC) AS ROWNR
FROM
	(
		SELECT DISTINCT INTEGRATION_AREA_TABLE
		FROM MD_TABLE_MAPPING
		WHERE SUBSTRING(INTEGRATION_AREA_TABLE,1,4)='LNK_'
			AND VERSION_ID = @VERSION_ID
	) stgsbu


PRINT ''
PRINT 'Processing metadata for MD_SAT (Satellite entities - excluding Link-Satelites)';
INSERT INTO [MD_SAT]
([SATELLITE_TABLE_NAME],[SATELLITE_TABLE_ID], [SATELLITE_TYPE], [STAGING_AREA_TABLE_ID], [HUB_TABLE_ID], [LINK_TABLE_ID], [FILTER_CRITERIA])
SELECT 
	SATELLITE_TABLE_NAME, 
	ROW_NUMBER() OVER (ORDER BY SATELLITE_TABLE_NAME ASC) AS SATELLITE_TABLE_ID,
	SATELLITE_TYPE,
	STAGING_AREA_TABLE_ID,
	HUB_TABLE_ID,
	LINK_TABLE_ID,
	FILTER_CRITERIA
FROM
	(
		SELECT DISTINCT 
			spec.INTEGRATION_AREA_TABLE AS SATELLITE_TABLE_NAME, 
			stg.STAGING_AREA_TABLE_ID, 
			hubkeysub.HUB_TABLE_ID,
			'Normal' AS SATELLITE_TYPE,
			-1 AS LINK_TABLE_ID, -- No link for normal Satellites
			spec.FILTER_CRITERIA
		FROM MD_TABLE_MAPPING spec
		LEFT OUTER JOIN -- Join in the Staging_Area_ID from the MD_STG table
			MD_STG stg ON stg.STAGING_AREA_TABLE_NAME=spec.STAGING_AREA_TABLE
		LEFT OUTER JOIN
		(
			SELECT DISTINCT INTEGRATION_AREA_TABLE, hub.HUB_TABLE_ID, STAGING_AREA_TABLE, BUSINESS_KEY_ATTRIBUTE
			FROM MD_TABLE_MAPPING spec2
			LEFT OUTER JOIN -- Join in the Hub ID from the MD table
				MD_HUB hub ON hub.HUB_TABLE_NAME=spec2.INTEGRATION_AREA_TABLE
			WHERE SUBSTRING(INTEGRATION_AREA_TABLE,1,4)='HUB_'
					AND VERSION_ID = @VERSION_ID
		) hubkeysub
			ON spec.STAGING_AREA_TABLE=hubkeysub.STAGING_AREA_TABLE
			AND replace(spec.BUSINESS_KEY_ATTRIBUTE,' ','')=replace(hubkeysub.BUSINESS_KEY_ATTRIBUTE,' ','')
		WHERE SUBSTRING(spec.INTEGRATION_AREA_TABLE,1,4)='SAT_'
		AND spec.INTEGRATION_AREA_TABLE NOT LIKE '%_END_DATES%'
		AND VERSION_ID = @VERSION_ID
	) mastersub


PRINT ''
PRINT 'Processing MD_STG_HUB_XREF (the Staging / Hub relationship)';
INSERT INTO [MD_STG_HUB_XREF]
([HUB_TABLE_ID], [STAGING_AREA_TABLE_ID], [FILTER_CRITERIA])
SELECT
	HUB_TABLE_ID,
	STAGING_AREA_TABLE_ID,
	FILTER_CRITERIA
FROM
	(	
		SELECT DISTINCT 
			STAGING_AREA_TABLE,
			INTEGRATION_AREA_TABLE,
			FILTER_CRITERIA
		FROM  
			MD_TABLE_MAPPING
		WHERE 
			SUBSTRING(INTEGRATION_AREA_TABLE,1,4)='HUB_'
			AND VERSION_ID = @VERSION_ID
	) hub
LEFT OUTER JOIN
	( 
		SELECT STAGING_AREA_TABLE_ID, STAGING_AREA_TABLE_NAME
		FROM MD_STG
	) stgsub
ON hub.STAGING_AREA_TABLE=stgsub.STAGING_AREA_TABLE_NAME
LEFT OUTER JOIN
	( 
		SELECT HUB_TABLE_ID, HUB_TABLE_NAME
		FROM MD_HUB
	) hubsub
ON hub.INTEGRATION_AREA_TABLE=hubsub.HUB_TABLE_NAME


PRINT ''
PRINT 'Processing MD_ATT (the list of attributes in the models)';
INSERT INTO [MD_ATT]
(ATTRIBUTE_ID, ATTRIBUTE_NAME)
SELECT 
	ROW_NUMBER() OVER (ORDER BY COLUMN_NAME), sub.COLUMN_NAME
FROM 
( 
	SELECT DISTINCT(COLUMN_NAME) FROM
	(
		SELECT COLUMN_NAME FROM EDW_100_Staging_Area.INFORMATION_SCHEMA.COLUMNS
		UNION
		SELECT COLUMN_NAME FROM EDW_200_Integration_Layer.INFORMATION_SCHEMA.COLUMNS
	) sub1
) sub


PRINT ''
PRINT 'Processing MD_BUSINESS_KEY_COMPONENT (the Business Key definition)';
INSERT INTO MD_BUSINESS_KEY_COMPONENT
(STAGING_AREA_TABLE_ID, HUB_TABLE_ID, COMPONENT_ID, COMPONENT_ORDER, COMPONENT_VALUE, COMPONENT_TYPE)

SELECT 
	STAGING_AREA_TABLE_ID,
	--STAGING_AREA_TABLE_NAME,
	HUB_TABLE_ID,
	--HUB_TABLE_NAME,
	ROW_NUMBER() OVER (PARTITION BY STAGING_AREA_TABLE_ID, HUB_TABLE_ID ORDER BY STAGING_AREA_TABLE_ID, HUB_TABLE_ID, COMPONENT_ORDER ASC) AS COMPONENT_ID,
	COMPONENT_ORDER,
	REPLACE(COMPONENT_VALUE,'COMPOSITE(','') AS COMPONENT_VALUE,
	CASE
			WHEN SUBSTRING(COMPONENT_VALUE,1,11)='CONCATENATE' THEN 'CONCATENATE()'
			WHEN SUBSTRING(COMPONENT_VALUE,1,6)='PIVOT' THEN 'PIVOT()'
			WHEN SUBSTRING(COMPONENT_VALUE,1,9)='COMPOSITE' THEN 'COMPOSITE()'
			ELSE 'NORMAL'
	END AS COMPONENT_TYPE
FROM
(      
    SELECT DISTINCT
		A.STAGING_AREA_TABLE,
        A.BUSINESS_KEY_ATTRIBUTE,
		A.INTEGRATION_AREA_TABLE,
        CASE 
			WHEN CHARINDEX('(',RTRIM(LTRIM(Split.a.value('.', 'VARCHAR(MAX)'))))>0
            THEN RTRIM(LTRIM(Split.a.value('.', 'VARCHAR(MAX)')))
            ELSE REPLACE(RTRIM(LTRIM(Split.a.value('.', 'VARCHAR(MAX)'))),')','')
        END AS COMPONENT_VALUE,
        ROW_NUMBER() OVER (PARTITION BY STAGING_AREA_TABLE, INTEGRATION_AREA_TABLE, BUSINESS_KEY_ATTRIBUTE ORDER BY STAGING_AREA_TABLE, INTEGRATION_AREA_TABLE, BUSINESS_KEY_ATTRIBUTE ASC) AS COMPONENT_ORDER  
    FROM  
    (
	    SELECT STAGING_AREA_TABLE, INTEGRATION_AREA_TABLE, BUSINESS_KEY_ATTRIBUTE, CONVERT(XML, '<M>' + REPLACE(BUSINESS_KEY_ATTRIBUTE, ',', '</M><M>') + '</M>') AS BUSINESS_KEY_ATTRIBUTE_XML  
        FROM  
		(
			SELECT DISTINCT STAGING_AREA_TABLE, INTEGRATION_AREA_TABLE, LTRIM(RTRIM(BUSINESS_KEY_ATTRIBUTE)) AS BUSINESS_KEY_ATTRIBUTE 
			FROM MD_TABLE_MAPPING
			WHERE SUBSTRING(INTEGRATION_AREA_TABLE,1,4)='HUB_'
					AND VERSION_ID = @VERSION_ID
		) TableName
	) AS A CROSS APPLY BUSINESS_KEY_ATTRIBUTE_XML.nodes ('/M') AS Split(a)
	WHERE BUSINESS_KEY_ATTRIBUTE<>'N/A' AND A.BUSINESS_KEY_ATTRIBUTE!=''
) pivotsub
LEFT OUTER JOIN
       ( 
              SELECT STAGING_AREA_TABLE_ID, STAGING_AREA_TABLE_NAME
              FROM MD_STG
       ) stgsub
ON pivotsub.STAGING_AREA_TABLE=stgsub.STAGING_AREA_TABLE_NAME
LEFT OUTER JOIN
       ( 
              SELECT HUB_TABLE_ID, HUB_TABLE_NAME
              FROM MD_HUB
       ) hubsub
ON pivotsub.INTEGRATION_AREA_TABLE=hubsub.HUB_TABLE_NAME
ORDER BY stgsub.STAGING_AREA_TABLE_ID, hubsub.HUB_TABLE_ID, COMPONENT_ORDER


PRINT ''
PRINT 'Processing MD_BUSINESS_KEY_COMPONENT_PART (the individual Business Key elements)';
INSERT INTO dbo.MD_BUSINESS_KEY_COMPONENT_PART
        ( STAGING_AREA_TABLE_ID,
		  HUB_TABLE_ID,
          COMPONENT_ID,
          COMPONENT_ELEMENT_ID,
          COMPONENT_ELEMENT_ORDER,
          COMPONENT_ELEMENT_VALUE,
          COMPONENT_ELEMENT_TYPE,
          ATTRIBUTE_ID
        )
SELECT DISTINCT
	STAGING_AREA_TABLE_ID,
	HUB_TABLE_ID,
	COMPONENT_ID,
	ROW_NUMBER() over (partition by STAGING_AREA_TABLE_ID, HUB_TABLE_ID,COMPONENT_ID order by nullif(0*Split.a.value('count(.)','int'), 0)) AS COMPONENT_ELEMENT_ID,
	ROW_NUMBER() over (partition by STAGING_AREA_TABLE_ID, HUB_TABLE_ID,COMPONENT_ID order by nullif(0*Split.a.value('count(.)','int'), 0)) AS COMPONENT_ELEMENT_ORDER,
	REPLACE(REPLACE(REPLACE(RTRIM(LTRIM(Split.a.value('.', 'VARCHAR(MAX)'))),'CONCATENATE(',''),')',''),'COMPOSITE(','') AS COMPONENT_ELEMENT_VALUE,
	CASE
			WHEN charindex(CHAR(39),REPLACE(REPLACE(RTRIM(LTRIM(Split.a.value('.', 'VARCHAR(MAX)'))),'CONCATENATE(',''),')',''))=1 THEN 'User Defined Value'
			ELSE 'Attribute'
	END AS COMPONENT_ELEMENT_TYPE,
	COALESCE(att.ATTRIBUTE_ID,-1) AS ATTRIBUTE_ID
FROM  
(
	SELECT  
		STAGING_AREA_TABLE_ID,
		HUB_TABLE_ID,
		COMPONENT_ID,
		COMPONENT_VALUE, 
		CONVERT(XML, '<M>' + REPLACE(COMPONENT_VALUE, ';', '</M><M>') + '</M>') AS COMPONENT_VALUE_XML  
	FROM MD_BUSINESS_KEY_COMPONENT
) AS A CROSS APPLY COMPONENT_VALUE_XML.nodes ('/M') AS Split(a)
LEFT OUTER JOIN
	dbo.MD_ATT att ON
	REPLACE(REPLACE(RTRIM(LTRIM(Split.a.value('.', 'VARCHAR(MAX)'))),'CONCATENATE(',''),')','')=att.ATTRIBUTE_NAME
WHERE COMPONENT_VALUE<>'N/A' AND A.COMPONENT_VALUE!=''
ORDER BY A.STAGING_AREA_TABLE_ID, A.HUB_TABLE_ID, A.COMPONENT_ID, COMPONENT_ELEMENT_ORDER 


PRINT ''
PRINT 'Processing MD_HUB_LINK_XREF (the Hub / Link relationship)';
INSERT INTO MD_HUB_LINK_XREF
(
	 HUB_TABLE_ID
	,LINK_TABLE_ID
	,[ROLE]
	,DRIVING_KEY_INDICATOR
	,STAGING_AREA_TABLE_ID
	,FILTER_CRITERIA
)
SELECT hub_tbl.HUB_TABLE_ID
       ,lnk_tbl.LINK_TABLE_ID
	   ,'Normal' AS [ROLE]
	   ,'N' AS [DRIVING_KEY_INDICATOR]
	   ,stg_tbl.STAGING_AREA_TABLE_ID
	   ,lnk.FILTER_CRITERIA
FROM [dbo].MD_TABLE_MAPPING lnk
JOIN [dbo].MD_TABLE_MAPPING hub
   ON lnk.STAGING_AREA_TABLE = hub.STAGING_AREA_TABLE
	AND NOT EXISTS (
		 SELECT *
		 FROM
		  (
			 SELECT ltrim(rtrim(BUSINESS_KEY_ATTRIBUTE.value('.', 'VARCHAR(MAX)'))) as BUSINESS_KEY_ATTRIBUTE
				FROM( 
					SELECT CONVERT(XML, '<M>' + REPLACE(hub.BUSINESS_KEY_ATTRIBUTE, ',', '</M><M>') + '</M>') as BUSINESS_KEY_ATTRIBUTE_XML
				)A
			   CROSS APPLY BUSINESS_KEY_ATTRIBUTE_XML.nodes ('/M') BUSINESS_KEY_ATTRIBUTES(BUSINESS_KEY_ATTRIBUTE)
		   )hub_key_columns
		   LEFT JOIN
		   (
			 SELECT ltrim(rtrim(BUSINESS_KEY_ATTRIBUTE.value('.', 'VARCHAR(MAX)'))) as BUSINESS_KEY_ATTRIBUTE
				FROM( 
					SELECT CONVERT(XML, '<M>' + REPLACE(lnk.BUSINESS_KEY_ATTRIBUTE, ',', '</M><M>') + '</M>') as BUSINESS_KEY_ATTRIBUTE_XML
				)A
			   CROSS APPLY BUSINESS_KEY_ATTRIBUTE_XML.nodes ('/M') BUSINESS_KEY_ATTRIBUTES(BUSINESS_KEY_ATTRIBUTE)
		   )lnk_key_columns
		   ON hub_key_columns.BUSINESS_KEY_ATTRIBUTE = lnk_key_columns.BUSINESS_KEY_ATTRIBUTE
		   WHERE lnk_key_columns.BUSINESS_KEY_ATTRIBUTE is null
		 )

	   JOIN dbo.MD_HUB hub_tbl
	     ON hub.INTEGRATION_AREA_TABLE = hub_tbl.HUB_TABLE_NAME

	   JOIN dbo.MD_LINK lnk_tbl
	     ON lnk.INTEGRATION_AREA_TABLE = lnk_tbl.LINK_TABLE_NAME

	   JOIN dbo.MD_STG stg_tbl
	     ON lnk.STAGING_AREA_TABLE = stg_tbl.STAGING_AREA_TABLE_NAME
		 and hub.STAGING_AREA_TABLE = stg_tbl.STAGING_AREA_TABLE_NAME

WHERE lnk.INTEGRATION_AREA_TABLE like 'LNK_%' and hub.INTEGRATION_AREA_TABLE like 'HUB_%'
		AND hub.VERSION_ID = @VERSION_ID
		AND lnk.VERSION_ID = @VERSION_ID


PRINT ''
PRINT 'Processing Satellite Driving Key Settings (on MD_HUB_LINK_XREF)';
/* Driving Key setting */
UPDATE u
SET DRIVING_KEY_INDICATOR='Y'
FROM MD_HUB_LINK_XREF u
INNER JOIN MD_LINK lnk ON lnk.LINK_TABLE_ID=u.LINK_TABLE_ID
INNER JOIN MD_HUB hub ON hub.HUB_TABLE_ID=u.HUB_TABLE_ID
INNER JOIN
(
	SELECT 
		LINK_TABLE_NAME,
		HUB_TABLE_NAME,
		Value 
	FROM 
	(
		SELECT
		 st.name LINK_TABLE_NAME,
		 'HUB_'+SUBSTRING(sc.name,1,LEN(sc.name)-4) HUB_TABLE_NAME,
		 sep.value [Value]
		 FROM [EDW_200_Integration_Layer].sys.tables st
		 INNER JOIN [EDW_200_Integration_Layer].sys.columns sc on st.object_id = sc.object_id
		 LEFT JOIN [EDW_200_Integration_Layer].sys.extended_properties sep on st.object_id = sep.major_id
		 AND sc.column_id = sep.minor_id
		 AND sep.name = 'Driving_Key_Indicator'
	) extprop
	WHERE Value='True'
) dksub 
ON dksub.LINK_TABLE_NAME=lnk.LINK_TABLE_NAME
AND dksub.HUB_TABLE_NAME=hub.HUB_TABLE_NAME


PRINT ''
PRINT 'Processing MD_SAT (for the Link Satellites)';
INSERT INTO MD_SAT
([SATELLITE_TABLE_NAME],[SATELLITE_TABLE_ID], [SATELLITE_TYPE], [STAGING_AREA_TABLE_ID], [HUB_TABLE_ID], [LINK_TABLE_ID], [FILTER_CRITERIA])
SELECT 
	SATELLITE_TABLE_NAME, 
	10000+ROW_NUMBER() OVER (ORDER BY SATELLITE_TABLE_NAME ASC) AS SATELLITE_TABLE_ID,
	SATELLITE_TYPE,
	STAGING_AREA_TABLE_ID,
	HUB_TABLE_ID,
	LINK_TABLE_ID,
	FILTER_CRITERIA
FROM
	(
		SELECT DISTINCT
			spec.INTEGRATION_AREA_TABLE AS SATELLITE_TABLE_NAME, 
			COALESCE(STAGING_AREA_TABLE_ID,-1) AS STAGING_AREA_TABLE_ID, 
			-1 AS HUB_TABLE_ID,
			CASE 
				WHEN DRIVING_KEY_INDICATOR = 'Y' THEN 'Link Satellite - Without Attributes'
				ELSE 'Link Satellite'
			END AS SATELLITE_TYPE,
			lnkkeysub.LINK_TABLE_ID,
			spec.FILTER_CRITERIA
		FROM MD_TABLE_MAPPING spec
		LEFT OUTER JOIN 
		(
			SELECT DISTINCT 
				INTEGRATION_AREA_TABLE AS LINK_TABLE_NAME,
				'LSAT_'+SUBSTRING(INTEGRATION_AREA_TABLE,5,LEN(INTEGRATION_AREA_TABLE)) AS LINK_SATELLITE_TABLE_NAME,
		     	lnk.LINK_TABLE_ID,
				spec2.FILTER_CRITERIA
			FROM MD_TABLE_MAPPING spec2
			LEFT OUTER JOIN -- Join in the Link ID from the MD table
				MD_LINK lnk ON lnk.LINK_TABLE_NAME=spec2.INTEGRATION_AREA_TABLE
			WHERE SUBSTRING(INTEGRATION_AREA_TABLE,1,4)='LNK_'
				AND VERSION_ID = @VERSION_ID
		) lnkkeysub
			ON spec.INTEGRATION_AREA_TABLE=lnkkeysub.LINK_SATELLITE_TABLE_NAME
		LEFT OUTER JOIN
		(
			SELECT 
				STAGING_AREA_TABLE_ID, 
				STAGING_AREA_TABLE_NAME
			FROM MD_STG
		) stgsub ON stgsub.STAGING_AREA_TABLE_NAME=spec.STAGING_AREA_TABLE
		LEFT OUTER JOIN
		(
			SELECT
			  a.HUB_TABLE_ID,
			  HUB_TABLE_NAME,
			  a.LINK_TABLE_ID,
			  c.LINK_TABLE_NAME,
			  DRIVING_KEY_INDICATOR
			FROM MD_HUB_LINK_XREF a
			JOIN MD_HUB b ON a.HUB_TABLE_ID=b.HUB_TABLE_ID
			JOIN MD_LINK c ON a.LINK_TABLE_ID=c.LINK_TABLE_ID
			WHERE DRIVING_KEY_INDICATOR='Y'
		) dksub ON dksub.LINK_TABLE_ID=lnkkeysub.LINK_TABLE_ID
		WHERE SUBSTRING(spec.INTEGRATION_AREA_TABLE,1,5)='LSAT_'
		AND spec.INTEGRATION_AREA_TABLE NOT LIKE '%_END_DATES%'
	) mastersub;


PRINT ''
PRINT 'Processing MD_STG_SAT_ATT_XREF (attribute mapping)';
WITH MAPPED_ATTRIBUTES AS
(
SELECT  stg.STAGING_AREA_TABLE_ID
       ,sat.SATELLITE_TABLE_ID
	   ,stg_attr.ATTRIBUTE_ID AS ATTRIBUTE_FROM_ID
       ,target_attr.ATTRIBUTE_ID AS ATTRIBUTE_TO_ID   
	   ,'N' as MULTI_ACTIVE_KEY_INDICATOR
	   ,'manually_mapped' as VERIFICATION
FROM dbo.MD_ATTRIBUTE_MAPPING mapping
       LEFT OUTER JOIN dbo.MD_SAT sat
	     on sat.SATELLITE_TABLE_NAME=mapping.TARGET_TABLE
	   LEFT OUTER JOIN dbo.MD_ATT target_attr
	     on mapping.TARGET_COLUMN = target_attr.ATTRIBUTE_NAME
	   LEFT OUTER JOIN dbo.MD_STG stg
	     on stg.STAGING_AREA_TABLE_NAME = mapping.SOURCE_TABLE
	   LEFT OUTER JOIN dbo.MD_ATT stg_attr
	     on mapping.SOURCE_COLUMN = stg_attr.ATTRIBUTE_NAME
WHERE TARGET_TABLE not like '%_SK' AND SUBSTRING(TARGET_TABLE,1,3)!='LNK'
		AND VERSION_ID = @VERSION_ID
--AND TARGET_TABLE='LSAT_MEMBERSHIP'
),
ORIGINAL_ATTRIBUTES AS
(
SELECT 
	--TABLE_NAME, 
	--COLUMN_NAME, 
	stg.STAGING_AREA_TABLE_ID,
	sat.SATELLITE_TABLE_ID,
	stg_attr.ATTRIBUTE_ID AS ATTRIBUTE_FROM_ID,
	stg_attr.ATTRIBUTE_ID AS ATTRIBUTE_TO_ID,
	'N' as MULTI_ACTIVE_KEY_INDICATOR,
	'automatically_mapped' AS VERIFICATION
FROM EDW_100_Staging_Area.INFORMATION_SCHEMA.COLUMNS mapping
LEFT OUTER JOIN dbo.MD_STG stg
	on stg.STAGING_AREA_TABLE_NAME = mapping.TABLE_NAME
LEFT OUTER JOIN dbo.MD_ATT stg_attr
	on mapping.COLUMN_NAME = stg_attr.ATTRIBUTE_NAME
JOIN MD_SAT sat 
    on 	stg.STAGING_AREA_TABLE_ID = sat.STAGING_AREA_TABLE_ID
JOIN EDW_200_Integration_Layer.INFORMATION_SCHEMA.COLUMNS satatts
    on sat.SATELLITE_TABLE_NAME=satatts.TABLE_NAME
    and UPPER(mapping.COLUMN_NAME) = UPPER(satatts.COLUMN_NAME)
WHERE SUBSTRING(mapping.COLUMN_NAME,1,4)!='OMD_'
)
INSERT INTO [dbo].MD_STG_SAT_ATT_XREF
(
	   [STAGING_AREA_TABLE_ID]
      ,[SATELLITE_TABLE_ID]
      ,[ATTRIBUTE_ID_FROM]
      ,[ATTRIBUTE_ID_TO]
      ,[MULTI_ACTIVE_KEY_INDICATOR]
)
SELECT 
	STAGING_AREA_TABLE_ID,
	SATELLITE_TABLE_ID,
	ATTRIBUTE_FROM_ID,
	ATTRIBUTE_TO_ID,
	MULTI_ACTIVE_KEY_INDICATOR
	--VERIFICATION
FROM MAPPED_ATTRIBUTES
UNION
SELECT 
	a.STAGING_AREA_TABLE_ID,
	a.SATELLITE_TABLE_ID,
	a.ATTRIBUTE_FROM_ID,
	a.ATTRIBUTE_TO_ID,
	a.MULTI_ACTIVE_KEY_INDICATOR
	--a.VERIFICATION
FROM ORIGINAL_ATTRIBUTES a
LEFT OUTER JOIN MAPPED_ATTRIBUTES b 
	ON a.STAGING_AREA_TABLE_ID=b.STAGING_AREA_TABLE_ID 
  AND a.SATELLITE_TABLE_ID=b.SATELLITE_TABLE_ID
  AND a.ATTRIBUTE_FROM_ID=b.ATTRIBUTE_FROM_ID
WHERE b.ATTRIBUTE_TO_ID IS NULL

PRINT ''
PRINT 'Processing MD_STG_LINK_ATT_XREF (attribute mapping - degenerate attributes)';
/*Insert attribute mapping*/
WITH MAPPED_ATTRIBUTES AS
(
SELECT  stg.STAGING_AREA_TABLE_ID
       ,lnk.LINK_TABLE_ID
	   ,stg_attr.ATTRIBUTE_ID AS ATTRIBUTE_FROM_ID
       ,target_attr.ATTRIBUTE_ID AS ATTRIBUTE_TO_ID   
	   ,'manually_mapped' as VERIFICATION
FROM dbo.MD_ATTRIBUTE_MAPPING mapping
       LEFT OUTER JOIN dbo.MD_LINK lnk
	     on lnk.LINK_TABLE_NAME=mapping.TARGET_TABLE
	   LEFT OUTER JOIN dbo.MD_ATT target_attr
	     on mapping.TARGET_COLUMN = target_attr.ATTRIBUTE_NAME
	   LEFT OUTER JOIN dbo.MD_STG stg
	     on stg.STAGING_AREA_TABLE_NAME = mapping.SOURCE_TABLE
	   LEFT OUTER JOIN dbo.MD_ATT stg_attr
	     on mapping.SOURCE_COLUMN = stg_attr.ATTRIBUTE_NAME
WHERE TARGET_TABLE not like '%_SK' AND SUBSTRING(TARGET_TABLE,1,3)='LNK'
	AND VERSION_ID = @VERSION_ID
),
ORIGINAL_ATTRIBUTES AS
(
SELECT 
	--TABLE_NAME, 
	--COLUMN_NAME, 
	stg.STAGING_AREA_TABLE_ID,
	lnk.LINK_TABLE_ID,
	stg_attr.ATTRIBUTE_ID AS ATTRIBUTE_FROM_ID,
	stg_attr.ATTRIBUTE_ID AS ATTRIBUTE_TO_ID,
	'automatically_mapped' AS VERIFICATION
FROM EDW_100_Staging_Area.INFORMATION_SCHEMA.COLUMNS mapping
LEFT OUTER JOIN dbo.MD_STG stg
	on stg.STAGING_AREA_TABLE_NAME = mapping.TABLE_NAME
LEFT OUTER JOIN dbo.MD_ATT stg_attr
	on mapping.COLUMN_NAME = stg_attr.ATTRIBUTE_NAME
JOIN MD_STG_LINK_ATT_XREF stglnk
    on 	stg.STAGING_AREA_TABLE_ID = stglnk.STAGING_AREA_TABLE_ID
JOIN MD_LINK lnk
    on stglnk.LINK_TABLE_ID = lnk.LINK_TABLE_ID
JOIN EDW_200_Integration_Layer.INFORMATION_SCHEMA.COLUMNS lnkatts
    on lnk.LINK_TABLE_NAME=lnkatts.TABLE_NAME
    and UPPER(mapping.COLUMN_NAME) = UPPER(lnkatts.COLUMN_NAME)
WHERE SUBSTRING(mapping.COLUMN_NAME,1,4)!='OMD_'
)
INSERT INTO [dbo].MD_STG_LINK_ATT_XREF
(
	   [STAGING_AREA_TABLE_ID]
      ,[LINK_TABLE_ID]
      ,[ATTRIBUTE_ID_FROM]
      ,[ATTRIBUTE_ID_TO]
)
SELECT 
	STAGING_AREA_TABLE_ID,
	LINK_TABLE_ID,
	ATTRIBUTE_FROM_ID,
	ATTRIBUTE_TO_ID
	--VERIFICATION
FROM MAPPED_ATTRIBUTES
UNION
SELECT 
	a.STAGING_AREA_TABLE_ID,
	a.LINK_TABLE_ID,
	a.ATTRIBUTE_FROM_ID,
	a.ATTRIBUTE_TO_ID
	--a.VERIFICATION
FROM ORIGINAL_ATTRIBUTES a
LEFT OUTER JOIN MAPPED_ATTRIBUTES b 
	ON a.STAGING_AREA_TABLE_ID=b.STAGING_AREA_TABLE_ID 
  AND a.LINK_TABLE_ID=b.LINK_TABLE_ID
  AND a.ATTRIBUTE_FROM_ID=b.ATTRIBUTE_FROM_ID
WHERE b.ATTRIBUTE_TO_ID IS NULL


PRINT ''
PRINT 'Processing Link Satellite Multi-Active Key Settings (MD_STG_SAT_ATT_XREF)';
/* Multi-Active Key setting */
UPDATE u
SET MULTI_ACTIVE_KEY_INDICATOR='Y'
FROM MD_STG_SAT_ATT_XREF u
INNER JOIN MD_SAT sat ON sat.SATELLITE_TABLE_ID=u.SATELLITE_TABLE_ID
INNER JOIN MD_ATT att ON att.ATTRIBUTE_ID = u.ATTRIBUTE_ID_TO
INNER JOIN 
(
	SELECT
		SATELLITE_TABLE_NAME,
		ATTRIBUTE_NAME
	FROM
	(
	SELECT 
		sc.name AS SATELLITE_TABLE_NAME,
		C.name AS ATTRIBUTE_NAME
	FROM [EDW_200_Integration_Layer].sys.index_columns A
	JOIN [EDW_200_Integration_Layer].sys.indexes B
	ON A.object_id=B.object_id AND A.index_id=B.index_id
	JOIN [EDW_200_Integration_Layer].sys.columns C
	ON A.column_id=C.column_id AND A.object_id=C.object_id
	JOIN [EDW_200_Integration_Layer].sys.tables sc on sc.object_id = A.object_id
	WHERE is_primary_key=1
	AND C.name!='LOAD_DATETIME' AND C.name!='CURRENT_RECORD_INDICATOR'
	AND SUBSTRING(C.name,LEN(C.name)-3,4)!='_HSH'
	) ddsub
	WHERE SUBSTRING(SATELLITE_TABLE_NAME,1,4)='SAT_' OR SUBSTRING(SATELLITE_TABLE_NAME,1,5)='LSAT_'
) sub
ON sat.SATELLITE_TABLE_NAME=sub.SATELLITE_TABLE_NAME
AND att.ATTRIBUTE_NAME=sub.ATTRIBUTE_NAME

END












GO

